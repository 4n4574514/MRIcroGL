//pref
rayJitter|bool|false
sampleRate|float|1|10|20.0
//vert
void main() {
	gl_TexCoord[1] = gl_MultiTexCoord1;
	gl_Position = ftransform();
}
//frag
uniform int loops;
uniform float sampleRate, stepSize, sliceSize, viewWidth, viewHeight, clipPlaneDepth;
uniform sampler3D intensityVol; //3DTexture containing brightness
uniform sampler2D backFace;
uniform bool rayJitter;
uniform vec3 clearColor, clipPlane;
void main() {
	float stepSizeS = stepSize * sampleRate;
	float sliceSizeS = sliceSize / 1.0;
	// get normalized pixel coordinate in view port (e.g. [0,1]x[0,1])
	vec3 backPosition = texture2D(backFace,vec2(gl_FragCoord.x/viewWidth,gl_FragCoord.y/viewHeight)).xyz;
	// starting position of the ray is stored in the texture coordinate
	vec3 start = gl_TexCoord[1].xyz;
	vec3 dir = backPosition - start;
	float len = length(dir);
	dir = normalize(dir);
	//next see if clip plane intersects ray
	if (clipPlaneDepth > -0.5) {
		bool frontface = (dot(dir , clipPlane) > 0.0); //does clip plane face the camera?
		//next, distance from ray origin to clip plane
		float dis = dot(dir,clipPlane);
		if (dis != 0.0  )  dis = (-clipPlaneDepth - dot(clipPlane, start.xyz-0.5)) / dis;
		//we set "len = 0.0"  instead of "discard" or "return": return fails on 2006MacBookPro10.4ATI1900, discard fails on MacPro10.5NV8800 will not discard
		if ((frontface) && (dis >= len)) len = 0.0;
		if ((!frontface) && (dis <= 0.0)) len = 0.0;
		if ((dis > 0.0) && (dis < len)) {
			if (frontface) {
				start = start + dir * dis;
			} else {
				backPosition =  start + dir * (dis); 
			}
			dir = backPosition - start;
			len = length(dir);
			dir = normalize(dir);		
		}
	}
	vec3 deltaDir = dir * stepSizeS;
	vec4 colorSample,colAcc = vec4(0.0,0.0,0.0,0.0);
	float lengthAcc = 0.0;
	float opacityCorrection = stepSizeS/sliceSizeS;
	//jitter ray start to avoid wood grain aliasing
	vec3 samplePos = start.xyz;
	if (rayJitter)
		samplePos = start.xyz + deltaDir* (fract(sin(gl_FragCoord.x * 12.9898 + gl_FragCoord.y * 78.233) * 43758.5453));
	for(int i = 0; i < loops; i++) {
		colorSample = texture3D(intensityVol,samplePos);
		colorSample.a = 1.0-pow((1.0 - colorSample.a), opacityCorrection);		
		colorSample.rgb *= colorSample.a; 
		//accumulate color
		colAcc= (1.0 - colAcc.a) * colorSample + colAcc;
		samplePos += deltaDir;
		lengthAcc += stepSizeS;
		// terminate if opacity > 1 or the ray is outside the volume
		if ( lengthAcc >= len || colAcc.a > 0.95 )
			break;
	}
	colAcc.rgb = mix(clearColor,colAcc.rgb,colAcc.a);
	gl_FragColor = colAcc;
}