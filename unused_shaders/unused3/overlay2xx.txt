//pref
overlayVolume|set|2
boundThresh|float|0.0|0.3|0.95
edgeBoundMix|float|0|0.9|1
specular|float|0.0|0.2|1
shininess|float|0.01|10.0|30
backAlpha|float|0.0|0.95|1
overDistance|float|0.0|0.3|1
overAlpha|float|0.0|1.6|2.0
overShade|float|0.0|0.3|1.0
clipThick|float|0.01|0.7|1.0
Overlay transparency independent of background.|note
//vert
void main() {
	gl_TexCoord[1] = gl_MultiTexCoord1;
	gl_Position = ftransform();
}
//frag
uniform int loops;
uniform int overlays;
uniform float boundThresh;
uniform float edgeBoundMix;
uniform float clipThick;
uniform float stepSize;
uniform float sliceSize;
uniform float viewWidth;
uniform float viewHeight;
uniform vec3 clearColor;
uniform vec3 lightPosition;
uniform vec3 clipPlane;
uniform sampler3D overlayVol;
uniform sampler3D overlayGradientVol;
uniform sampler3D intensityVol;
uniform sampler3D gradientVol;
uniform sampler2D backFace;
uniform float clipPlaneDepth;
uniform float specular;
uniform float shininess;
uniform float overAlpha;
uniform float overDistance;
uniform float overShade;
uniform float backAlpha;
void main ()
{
  int i_1;
  float boundAcc2_2;
  float boundAcc_3;
  float stepSizex2_4;
  vec3 lightDirHeadOn_5;
  float opacityCorrection_6;
  vec4 oprevNorm_7;
  vec4 prevNorm_8;
  vec3 samplePos_9;
  int backDepthStart_10;
  int backDepthEnd_11;
  int overDepth_12;
  float lengthAcc_13;
  vec4 colAcc_14;
  vec4 gradientSample_15;
  vec4 colorSample_16;
  vec4 ocolorSample_17;
  vec4 overAcc_18;
  vec3 deltaDir_19;
  float clipEnd_20;
  float clipStart_21;
  float len_22;
  vec3 dir_23;
  vec2 pixelCoord_24;
  float overLight_25;
  float overAlphaFrac_26;
  overAlphaFrac_26 = overAlpha;
  if ((overAlpha > 1.0)) {
    overAlphaFrac_26 = 1.0;
  };
  overLight_25 = 1.0;
  if ((overAlphaFrac_26 > 1.0)) {
    overLight_25 = (overAlphaFrac_26 - 1.5);
  };
  pixelCoord_24.x = (gl_FragCoord.x / viewWidth);
  pixelCoord_24.y = (gl_FragCoord.y / viewHeight);
  vec3 tmpvar_27;
  tmpvar_27 = gl_TexCoord[1].xyz;
  vec3 tmpvar_28;
  tmpvar_28 = (texture2D (backFace, pixelCoord_24).xyz - tmpvar_27);
  float tmpvar_29;
  tmpvar_29 = sqrt(dot (tmpvar_28, tmpvar_28));
  len_22 = tmpvar_29;
  vec3 tmpvar_30;
  tmpvar_30 = normalize(tmpvar_28);
  dir_23 = tmpvar_30;
  clipStart_21 = 0.0;
  clipEnd_20 = tmpvar_29;
  if ((clipPlaneDepth > -0.5)) {
    float dis_31;
    float disBackFace_32;
    gl_FragColor.xyz = vec3(1.0, 0.0, 0.0);
    bool tmpvar_33;
    tmpvar_33 = (dot (tmpvar_30, clipPlane) > 0.0);
    disBackFace_32 = 0.0;
    float tmpvar_34;
    tmpvar_34 = dot (tmpvar_30, clipPlane);
    dis_31 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      disBackFace_32 = (((clipThick - clipPlaneDepth) - dot (clipPlane, 
        (tmpvar_27 - 0.5)
      )) / tmpvar_34);
    };
    if ((tmpvar_34 != 0.0)) {
      dis_31 = ((-(clipPlaneDepth) - dot (clipPlane, 
        (tmpvar_27 - 0.5)
      )) / tmpvar_34);
    };
    if (tmpvar_33) {
      clipStart_21 = dis_31;
      clipEnd_20 = disBackFace_32;
    };
    if (!(tmpvar_33)) {
      clipEnd_20 = dis_31;
      clipStart_21 = disBackFace_32;
    };
  };
  vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_30 * stepSize);
  deltaDir_19 = tmpvar_35;
  overAcc_18 = vec4(0.0, 0.0, 0.0, 0.0);
  colAcc_14 = vec4(0.0, 0.0, 0.0, 0.0);
  lengthAcc_13 = 0.0;
  overDepth_12 = 0;
  backDepthStart_10 = loops;
  samplePos_9 = (tmpvar_27 + (tmpvar_35 * fract(
    (sin(((gl_FragCoord.x * 12.9898) + (gl_FragCoord.y * 78.233))) * 43758.55)
  )));
  prevNorm_8 = vec4(0.0, 0.0, 0.0, 0.0);
  oprevNorm_7 = vec4(0.0, 0.0, 0.0, 0.0);
  opacityCorrection_6 = (stepSize / sliceSize);
  lightDirHeadOn_5 = normalize((gl_ModelViewMatrixInverse * vec4(0.0, 0.0, 1.0, 0.0))).xyz;
  stepSizex2_4 = (clipStart_21 + (stepSize * 1.5));
  boundAcc_3 = 0.0;
  boundAcc2_2 = 0.0;
  i_1 = 0;
  for (; i_1 < loops; i_1++, lengthAcc_13 = (lengthAcc_13 + stepSize), samplePos_9 = (samplePos_9 + deltaDir_19)) {
    if (((lengthAcc_13 <= clipStart_21) || (lengthAcc_13 > clipEnd_20))) {
      colorSample_16.w = 0.0;
    } else {
      vec4 tmpvar_36;
      tmpvar_36 = texture3D (intensityVol, samplePos_9);
      colorSample_16 = tmpvar_36;
      if (((lengthAcc_13 <= stepSizex2_4) && (tmpvar_36.w > 0.01))) {
        colorSample_16.w = sqrt(tmpvar_36.w);
      };
      colorSample_16.w = (1.0 - pow ((1.0 - colorSample_16.w), opacityCorrection_6));
      if (((colorSample_16.w > 0.01) && (lengthAcc_13 > stepSizex2_4))) {
        if ((backDepthStart_10 == loops)) {
          backDepthStart_10 = i_1;
        };
        backDepthEnd_11 = i_1;
        vec4 tmpvar_37;
        tmpvar_37 = texture3D (gradientVol, samplePos_9);
        gradientSample_15.w = tmpvar_37.w;
        gradientSample_15.xyz = normalize(((tmpvar_37.xyz * 2.0) - 1.0));
        if ((tmpvar_37.w < prevNorm_8.w)) {
          gradientSample_15.xyz = prevNorm_8.xyz;
        };
        prevNorm_8 = gradientSample_15;
        float tmpvar_38;
        tmpvar_38 = (pow ((1.0 - 
          abs(dot (gradientSample_15.xyz, lightDirHeadOn_5))
        ), 0.5) * pow (tmpvar_37.w, 0.3));
        if ((tmpvar_38 >= 0.01)) {
          colorSample_16.xyz = (tmpvar_36.xyz * (1.0 - pow (
            ((tmpvar_38 - 0.01) / 0.99)
          , 4.0)));
        };
        float tmpvar_39;
        tmpvar_39 = dot (gradientSample_15.xyz, lightPosition);
        if ((tmpvar_39 > 0.0)) {
          colorSample_16.xyz = (colorSample_16.xyz + (specular * pow (
            max (dot ((lightPosition - (2.0 * 
              (dot (gradientSample_15.xyz, lightPosition) * gradientSample_15.xyz)
            )), dir_23), 0.0)
          , shininess)));
        };
        if ((tmpvar_37.w > boundThresh)) {
          float boundAlpha_40;
          boundAlpha_40 = (1.0 - pow ((1.0 - 
            pow ((1.0 - abs(dot (gradientSample_15.xyz, lightDirHeadOn_5))), 6.0)
          ), opacityCorrection_6));
          boundAcc_3 = (boundAcc_3 + ((1.0 - boundAcc2_2) * boundAlpha_40));
          boundAcc2_2 = (boundAcc2_2 + ((1.0 - boundAcc2_2) * boundAlpha_40));
        };
      };
    };
    if ((overlays > 0)) {
      vec4 tmpvar_41;
      tmpvar_41 = texture3D (overlayGradientVol, samplePos_9);
      gradientSample_15 = tmpvar_41;
      if ((tmpvar_41.w > 0.01)) {
        if ((tmpvar_41.w < oprevNorm_7.w)) {
          gradientSample_15.xyz = oprevNorm_7.xyz;
        };
        oprevNorm_7 = gradientSample_15;
        gradientSample_15.xyz = normalize(((gradientSample_15.xyz * 2.0) - 1.0));
        vec4 tmpvar_42;
        tmpvar_42 = texture3D (overlayVol, samplePos_9);
        ocolorSample_17.xyz = tmpvar_42.xyz;
        ocolorSample_17.w = (tmpvar_42.w * tmpvar_41.w);
        ocolorSample_17.w = sqrt(ocolorSample_17.w);
        float tmpvar_43;
        tmpvar_43 = (pow ((1.0 - 
          abs(dot (gradientSample_15.xyz, lightDirHeadOn_5))
        ), 0.5) * pow (tmpvar_41.w, overShade));
        ocolorSample_17.w = pow (ocolorSample_17.w, (1.0 - tmpvar_43));
        ocolorSample_17.xyz = (tmpvar_42.xyz * (1.0 - tmpvar_43));
        float tmpvar_44;
        tmpvar_44 = dot (gradientSample_15.xyz, lightPosition);
        if ((tmpvar_44 > 0.0)) {
          ocolorSample_17.xyz = (ocolorSample_17.xyz + ((overLight_25 * specular) * pow (
            max (dot ((lightPosition - (2.0 * 
              (dot (gradientSample_15.xyz, lightPosition) * gradientSample_15.xyz)
            )), dir_23), 0.0)
          , shininess)));
        };
        ocolorSample_17.w = (ocolorSample_17.w * overAlphaFrac_26);
        if ((ocolorSample_17.w > 0.2)) {
          if ((overDepth_12 == 0)) {
            overDepth_12 = i_1;
          };
          float tmpvar_45;
          tmpvar_45 = (colorSample_16.w / ocolorSample_17.w);
          if ((colorSample_16.w > 0.02)) {
            colorSample_16.xyz = mix (colorSample_16.xyz, ocolorSample_17.xyz, tmpvar_45);
          } else {
            colorSample_16.xyz = ocolorSample_17.xyz;
          };
          colorSample_16.w = max (ocolorSample_17.w, colorSample_16.w);
        };
        ocolorSample_17.w = (1.0 - pow ((1.0 - ocolorSample_17.w), opacityCorrection_6));
        overAcc_18 = (((1.0 - overAcc_18.w) * ocolorSample_17) + overAcc_18);
        boundAcc2_2 = (boundAcc2_2 + ((1.0 - boundAcc2_2) * ocolorSample_17.w));
      };
    };
    colorSample_16.xyz = (colorSample_16.xyz * colorSample_16.w);
    colAcc_14 = (((1.0 - colAcc_14.w) * colorSample_16) + colAcc_14);
    if ((lengthAcc_13 >= len_22)) {
      break;
    };
  };
  if ((colAcc_14.w > -(boundAcc_3))) {
    colAcc_14 = mix (colAcc_14, vec4(0.0, 0.0, 0.0, 1.0), ((edgeBoundMix * boundAcc_3) / (colAcc_14.w + boundAcc_3)));
  };
  colAcc_14 = (colAcc_14 * backAlpha);
  if (((overAcc_18.w > 0.01) && (overAlpha > 1.0))) {
    colAcc_14.w = max (colAcc_14.w, overAcc_18.w);
    if ((((overDistance > 0.0) && (overDepth_12 > backDepthStart_10)) && (backDepthEnd_11 > backDepthStart_10))) {
      if ((overDepth_12 > backDepthEnd_11)) {
        overDepth_12 = backDepthStart_10;
      };
      float tmpvar_46;
      tmpvar_46 = pow ((1.0 - (
        float((overDepth_12 - backDepthStart_10))
       / 
        float((backDepthEnd_11 - backDepthStart_10))
      )), overDistance);
      overAcc_18 = (overAcc_18 * (tmpvar_46 * tmpvar_46));
    };
    overAlphaFrac_26 = (overAcc_18.w * (overAlpha - 1.0));
    if ((overAcc_18.w > 0.0)) {
      colAcc_14.xyz = mix (colAcc_14.xyz, overAcc_18.xyz, overAlphaFrac_26);
    };
  };
  if ((colAcc_14.w < 1.0)) {
    colAcc_14.xyz = mix (clearColor, colAcc_14.xyz, colAcc_14.w);
  };
  if ((tmpvar_29 == 0.0)) {
    colAcc_14.xyz = clearColor;
  };
  gl_FragColor = colAcc_14;
}