//pref
ambient|float|0|1|2
diffuse|float|0.0|0.3|1.0
specular|float|0.0|0.25|1
shininess|float|0.01|10.0|30
edgeThresh|float|0.001|0.01|1
edgeExp|float|0.001|0.15|1
boundExp|float|0.0|0.0|1.0
//vert
#version 330 core
layout(location = 0) in vec3 vPos;
out vec3 TexCoord1;
uniform int zoom = 1;
uniform mat4 modelViewProjectionMatrix;
void main() {
    TexCoord1 = vPos;
    gl_Position = modelViewProjectionMatrix * vec4(vPos, 1.0);
    gl_Position.xy *= zoom;
}
//frag
#version 330 core
in vec3 TexCoord1;
out vec4 FragColor;
uniform mat4 modelViewMatrixInverse;
uniform int loops;
uniform float stepSize, sliceSize, viewWidth, viewHeight;
uniform sampler3D intensityVol;
uniform sampler3D gradientVol;
uniform sampler2D backFace;
uniform vec3 clearColor,lightPosition, clipPlane;
uniform float clipPlaneDepth;
uniform float ambient = 1.0;
uniform float diffuse = 0.3;
uniform float specular = 0.25;
uniform float shininess = 10.0;
uniform float edgeThresh = 0.01;
uniform float edgeExp = 0.15;
uniform float boundExp = 0.0;
void main() {
	vec3 backPosition = texture(backFace,vec2(gl_FragCoord.x/viewWidth,gl_FragCoord.y/viewHeight)).xyz;
	vec3 start = TexCoord1.xyz;
	if (backPosition == clearColor) discard;
	vec3 dir = backPosition - start;
	float len = length(dir);
	dir = normalize(dir);
	if (clipPlaneDepth > -0.5) {
		FragColor.rgb = vec3(1.0,0.0,0.0);
		bool frontface = (dot(dir , clipPlane) > 0.0);
		float dis = dot(dir,clipPlane);
		if (dis != 0.0  )  dis = (-clipPlaneDepth - dot(clipPlane, start.xyz-0.5)) / dis;
		if ((frontface) && (dis >= len)) len = 0.0;
		if ((!frontface) && (dis <= 0.0)) len = 0.0;
		if ((dis > 0.0) && (dis < len)) {
			if (frontface) {
				start = start + dir * dis;
			} else {
				backPosition =  start + dir * (dis);
			}
			dir = backPosition - start;
			len = length(dir);
			dir = normalize(dir);
		}
	}

	vec3 deltaDir = dir * stepSize;
	vec4 colorSample,gradientSample,colAcc = vec4(0.0,0.0,0.0,0.0);
	float lengthAcc = 0.0;
	vec3 samplePos = start.xyz + deltaDir* (fract(sin(gl_FragCoord.x * 12.9898 + gl_FragCoord.y * 78.233) * 43758.5453));
	vec4 prevNorm = vec4(0.0,0.0,0.0,0.0);
	vec3 lightDirHeadOn =  normalize(modelViewMatrixInverse * vec4(0.0,0.0,1.0,0.0)).xyz ;
	float stepSizex2 = sliceSize * 2.0;
	for(int i = 0; i < loops; i++) {
		//colorSample = texture(gradientVol, samplePos);
		colorSample = texture(intensityVol,samplePos);
		if ((lengthAcc <= stepSizex2) && (colorSample.a > 0.01) )  colorSample.a = sqrt(colorSample.a);
		colorSample.a = 1.0-pow((1.0 - colorSample.a), stepSize/sliceSize);
		if ((colorSample.a > 0.01) && (lengthAcc > stepSizex2)  ) {
			gradientSample= texture(gradientVol,samplePos);
			gradientSample.rgb = normalize(gradientSample.rgb*2.0 - 1.0);
			if (gradientSample.a < prevNorm.a)
				gradientSample.rgb = prevNorm.rgb;
			prevNorm = gradientSample;
			float lightNormDot = dot(gradientSample.rgb, lightDirHeadOn);
			float edgeVal = pow(1.0-abs(lightNormDot),edgeExp);
			edgeVal = edgeVal * pow(gradientSample.a,0.3);
	    	if (edgeVal >= edgeThresh)
				colorSample.rgb = mix(colorSample.rgb, vec3(0.0,0.0,0.0), pow((edgeVal-edgeThresh)/(1.0-edgeThresh),4.0));
			if (boundExp > 0.0)
				colorSample.a = colorSample.a * pow(gradientSample.a,boundExp)*pow(1.0-abs(lightNormDot),6.0);
			lightNormDot = dot(gradientSample.rgb, lightPosition);
			vec3 a = colorSample.rgb * ambient;
			vec3 d = max(lightNormDot, 0.0) * colorSample.rgb * diffuse;
			float s =   specular * pow(max(dot(reflect(lightPosition, gradientSample.rgb), dir), 0.0), shininess);
			colorSample.rgb = a + d + s;
		}
		colorSample.rgb *= colorSample.a;
		colAcc= (1.0 - colAcc.a) * colorSample + colAcc;
		samplePos += deltaDir;
		lengthAcc += stepSize;
		if ( lengthAcc >= len || colAcc.a > 0.95 )
			break;
	}
	colAcc.a = colAcc.a/0.95;
	if ( colAcc.a < 1.0 )
		colAcc.rgb = mix(clearColor,colAcc.rgb,colAcc.a);
	if (len == 0.0) colAcc.rgb = clearColor;
	FragColor = colAcc;
}