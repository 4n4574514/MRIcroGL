//pref
lightAmount|float|0.0|0.0|1
boundExp|float|0.0|0.0|3
goochAmount|float|0.0|0.0|1
showGradient|bool|false
doToon|bool|false
doPoor|bool|false
Inspired by Ellenberger and Nowak's GLSL interpretation of effects described by Ebert and Rheingans.|note
//frag
#version 330 core
in vec3 TexCoord1;
out vec4 FragColor;
uniform mat4 modelViewMatrixInverse;
uniform int loops;
uniform float stepSize, sliceSize, viewWidth, viewHeight;
uniform sampler3D intensityVol; //3DTexture containing brightness
uniform sampler3D gradientVol; //3DTexture containing gradient direction and magnitude
uniform sampler2D backFace;
uniform vec3 clearColor,lightPosition, clipPlane;
uniform float clipPlaneDepth;
uniform float boundExp, lightAmount, goochAmount;
uniform bool doPoor, doToon,  showGradient;
void main() {
	float edgeThresh = 0.0;
	float edgeExp = 0.0;
	float stepSizeX = stepSize;
	if (doPoor)
		stepSizeX = 20.0 * stepSize;
	// get normalized pixel coordinate in view port (e.g. [0,1]x[0,1])
	vec2 pixelCoord = gl_FragCoord.st;
	pixelCoord.x /= viewWidth;
	pixelCoord.y /= viewHeight;
	// starting position of the ray is stored in the texture coordinate
	vec3 start = TexCoord1;
	vec3 backPosition = texture(backFace,pixelCoord).xyz;
	if (backPosition == clearColor) discard;
	vec3 dir = backPosition - start;
	float len = length(dir);
	dir = normalize(dir);
	//next see if clip plane intersects ray
	if (clipPlaneDepth > -0.5) {
		FragColor.rgb = vec3(1.0,0.0,0.0);
		//next, see if clip plane faces viewer
		bool frontface = (dot(dir , clipPlane) > 0.0);
		//next, distance from ray origin to clip plane
		float dis = dot(dir,clipPlane);
		if (dis != 0.0  )  dis = (-clipPlaneDepth - dot(clipPlane, start.xyz-0.5)) / dis;
		//we set "len = 0.0"  instead of "discard" or "return": return fails on 2006MacBookPro10.4ATI1900, discard fails on MacPro10.5NV8800 will not discard
		if ((frontface) && (dis >= len)) len = 0.0;
		if ((!frontface) && (dis <= 0.0)) len = 0.0;
		if ((dis > 0.0) && (dis < len)) {
			if (frontface) {
				start = start + dir * dis;
			} else {
				backPosition =  start + dir * (dis);
			}
			dir = backPosition - start;
			len = length(dir);
			dir = normalize(dir);
		}
	}

	vec3 deltaDir = dir * stepSizeX;
	vec4 colorSample,gradientSample,colAcc = vec4(0.0,0.0,0.0,0.0);
	float lengthAcc = 0.0;
	vec3 samplePos = start.xyz;
	samplePos = start.xyz;
	if (!doPoor)
		samplePos += deltaDir* (fract(sin(gl_FragCoord.x * 12.9898 + gl_FragCoord.y * 78.233) * 43758.5453));
	vec4 prevNorm = vec4(0.0,0.0,0.0,0.0);
	vec3 lightDirHeadOn =  normalize(modelViewMatrixInverse * vec4(0.0,0.0,1.0,0.0)).xyz ;
	vec3 warmCol = vec3(1.0,1.0,0.0);//pure yellow
	vec3 coolCol = vec3(0.0,0.0,1.0);//pure blue
	vec3 toonCol = vec3(1.0,0.0,0.0);//pure red
	float stepSizex2 = sliceSize * 2.0;
	for(int i = 0; i < loops; i++) {
		colorSample = texture(intensityVol,samplePos);
		if ((lengthAcc <= stepSizex2) && (colorSample.a > 0.01) )  colorSample.a = sqrt(colorSample.a); //opaque clipping surface
		colorSample.a = 1.0-pow((1.0 - colorSample.a), stepSizeX/sliceSize);//opacity correction
		if ((colorSample.a > 0.01) && (lengthAcc > stepSizex2)  ) {
			gradientSample= texture(gradientVol,samplePos); //interpolate gradient direction and magnitude
			gradientSample.rgb = normalize(gradientSample.rgb*2.0 - 1.0); //direction saved as 0..1, rescale to -1..1
			//re-use previous normal if it has larger magnitude
			if (gradientSample.a < prevNorm.a)
				gradientSample.rgb = prevNorm.rgb;
			prevNorm = gradientSample;
			if(goochAmount > 0.0 ) {
				float toneLight = dot(normalize(lightPosition), gradientSample.rgb);
				//colorSample.rgb += goochAmount*(((1.0+toneLight )*.5)*warmCol + (1.0-((1.0+toneLight)*.5))*coolCol);
				colorSample.rgb = mix(colorSample.rgb,((1.0+toneLight )*.5)*warmCol + (1.0-((1.0+toneLight)*.5))*coolCol,goochAmount);
			}
			if (showGradient)
				colorSample.rgb = abs(gradientSample.rgb);
			//Edge shading - darken edges parallel with viewing direction
			float lightNormDot = dot(gradientSample.rgb, lightDirHeadOn); //with respect to viewer
			float edgeVal = pow(1.0-abs(lightNormDot),edgeExp);
			edgeVal = edgeVal * pow(gradientSample.a,0.3);
	    		if (edgeVal >= edgeThresh)
				colorSample.rgb = mix(colorSample.rgb, vec3(0.0,0.0,0.0), pow((edgeVal-edgeThresh)/(1.0-edgeThresh),4.0));
			if (boundExp > 0.0)
				colorSample.a = colorSample.a * pow(gradientSample.a,boundExp);
			//specular
		  	if (lightAmount > 0.0)
				colorSample.rgb += lightAmount*dot(normalize(lightPosition), gradientSample.rgb);

		  	if(doToon) {
				float toonLight = dot(normalize(lightPosition), gradientSample.rgb);
				//...create a set of 4 colors that go from bright
				//to the specified toon color
				vec3 col = toonCol - vec3(1.0, 1.0, 1.0);
				vec4 color1 = vec4(toonCol - .75*col, colorSample.a);
				vec4 color2 = vec4(toonCol - .5*col, colorSample.a);
				vec4 color3 = vec4(toonCol - .25*col, colorSample.a);
				vec4 color4 = vec4(toonCol, colorSample.a);

				//and then assign different ranges of the diffuse
				//coefficient to one of the 4 colors
				if (toonLight > 0.95)
					colorSample= color1;
				else if (toonLight > 0.5)
					colorSample= color2;
				else if (toonLight > 0.25)
					colorSample= color3;
				else
					colorSample= color4;
			}
		}

		colorSample.rgb *= colorSample.a;
		//accumulate color
		colAcc= (1.0 - colAcc.a) * colorSample + colAcc;
		samplePos += deltaDir;
		lengthAcc += stepSizeX;
		// terminate if opacity > 1 or the ray is outside the volume
		if ( lengthAcc >= len || colAcc.a > 0.95 )
			break;
	}
	colAcc.a = colAcc.a/0.95;
	if ( colAcc.a < 1.0 )
		colAcc.rgb = mix(clearColor,colAcc.rgb,colAcc.a);
	if (len == 0.0) colAcc.rgb = clearColor;
	FragColor = colAcc;
}