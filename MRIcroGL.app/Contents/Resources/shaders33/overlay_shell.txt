//pref
overlayVolume|set|2
boundThresh|float|0.0|0.3|0.95
edgeThresh|float|0|0.1|1
edgeBoundMix|float|0|0|1
colorTemp|float|0.0|1|1
backAlpha|float|0.0|1|1
overAlpha|float|0.0|1.2|2
overShade|float|0.0|0.3|1.0
overDistance|float|0.0|0.7|1
contrast|float|0.0|1.2|3
//frag
#version 330 core
in vec3 TexCoord1;
out vec4 FragColor;
uniform mat4 modelViewMatrixInverse;
uniform int loops, overlays;
uniform float overShade,boundThresh, edgeBoundMix, contrast, overDistance, backAlpha, overAlpha, edgeThresh,   colorTemp, clipPlaneDepth, stepSize, sliceSize, viewWidth, viewHeight;
uniform sampler3D gradientVol;
uniform sampler3D overlayVol;
uniform sampler3D overlayGradientVol;
uniform sampler2D backFace;
uniform vec3 clearColor, clipPlane, lightPosition;
uniform bool showGrayscale;
vec4 overAcc = vec4(0.0,0.0,0.0,0.0);
void main() {
	float overAlphaFrac = overAlpha;
	if (overAlphaFrac > 1.0) overAlphaFrac = 1.0;
	float overLight = 1.0;
	if (overAlphaFrac > 1.0) overLight =  1.0 * ((overAlphaFrac - 1.5)/1.0);

	float specular = 0.5;
	float edgeExp = 0.2;
	float boundExpD = 0.01;
	float shininess = 7.0;
	float edgeBoundMixD = 1.0 - pow(edgeBoundMix, 2.0);
	// get normalized pixel coordinate in view port (e.g. [0,1]x[0,1])
	vec2 pixelCoord = gl_FragCoord.st;
	pixelCoord.x /= viewWidth;
	pixelCoord.y /= viewHeight;
	// starting position of the ray is stored in the texture coordinate
	vec3 start = TexCoord1.xyz;
	vec3 backPosition = texture(backFace,pixelCoord).xyz;
	if (backPosition == clearColor) discard;
	vec3 dir = backPosition - start;
	float len = length(dir);
	dir = normalize(dir);
	vec4 edgeColor = vec4(1.0,1.0,1.0, 0.0);
	if (colorTemp < 0.5) {
		edgeColor.b = 1.0-((0.5-colorTemp)*-0.5);
		edgeColor.g = 1.0-((0.5-colorTemp)*-0.1);
	}
	if (colorTemp > 0.5) {
		edgeColor.g = 1.0-((colorTemp-0.5)*-0.1);
		edgeColor.r = 1.0-((colorTemp-0.5)*-0.5);
	}
	//next see if clip plane intersects ray
	float clipStart = 0.0;
	float clipEnd = len;
	if (clipPlaneDepth > -0.5) {
		FragColor.rgb = vec3(1.0,0.0,0.0);
		//next, see if clip plane faces viewer
		bool frontface = (dot(dir , clipPlane) > 0.0);
		//next, distance from ray origin to clip plane
		float dis = dot(dir,clipPlane);
		if (dis != 0.0  )  dis = (-clipPlaneDepth - dot(clipPlane, start.xyz-0.5)) / dis;
		//we set "len = 0.0"  instead of "discard" or "return": return fails on 2006MacBookPro10.4ATI1900, discard fails on MacPro10.5NV8800 will not discard
		if (frontface) clipStart = dis;
		if (!frontface)  clipEnd = dis;
	}
	vec3 deltaDir = dir * stepSize;
	vec4 gradientSample, ocolorSample, colorSample,colAcc = vec4(0.0,0.0,0.0,0.0);
	vec4 prevNorm = vec4(0.0,0.0,0.0,0.0);
	vec4 oprevNorm = vec4(0.0,0.0,0.0,0.0);
	vec3 lightDirHeadOn =  normalize(modelViewMatrixInverse * vec4(0.0,0.0,1.0,0.0)).xyz ;
	float lengthAcc = 0.0;
	float opacityCorrection = stepSize/sliceSize;
	//We need to calculate the ray's starting position: We add a random fraction of the stepsize to the original starting point to dither the output
	vec3 samplePos = start.xyz + deltaDir* (fract(sin(gl_FragCoord.x * 12.9898 + gl_FragCoord.y * 78.233) * 43758.5453));
	int overDepth = 0;
	int backDepthEnd, backDepthStart = loops;
	float boundAcc = 0.0;
	float boundAcc2 = 0.0;
	for(int i = 0; i < loops; i++) {
		gradientSample = texture(gradientVol,samplePos);
		if ((gradientSample.a < 0.01) || (lengthAcc <= clipStart) || (lengthAcc > clipEnd)) {
			colorSample = vec4(0.0,0.0,0.0,0.0);
		} else {
			if (backDepthStart == loops) backDepthStart = i;
			backDepthEnd = i;
			if (gradientSample.a < prevNorm.a)
				gradientSample.rgb = prevNorm.rgb;
			prevNorm = gradientSample;
			colorSample = gradientSample;
			gradientSample.rgb = normalize(gradientSample.rgb*2.0 - 1.0); //direction saved as 0..1, rescale to -1..1
			if (gradientSample.a > boundThresh) {
					float lightNormDot = dot(gradientSample.rgb, lightDirHeadOn); //with respect to viewer
					float boundAlpha = pow(1.0-abs(lightNormDot),6.0);
					boundAlpha = 1.0-pow((1.0 - boundAlpha), opacityCorrection);
					boundAcc += (1.0 - boundAcc2) * boundAlpha;
					boundAcc2 += (1.0 - boundAcc2) * boundAlpha;
			}

			colorSample = edgeColor; //color with alpha = 0.0
			if  (gradientSample.a > edgeThresh) {
				float edge = smoothstep(edgeThresh, 1.0, gradientSample.a);
				edge = pow(edge,edgeExp);
				colorSample.a = edge;
				//colorSample.a = edge*edgeBoundMixD;
				//specular
				float lightNormDot = dot(gradientSample.rgb, lightPosition); //with respect to light location
				if (lightNormDot > 0.0)
						edge +=   specular * pow(max(dot(reflect(lightPosition, gradientSample.rgb), dir), 0.0), shininess);
				colorSample.rgb = edgeColor.rgb * edge;
			}
		}

		if ( overlays > 0 ) {
			gradientSample= texture(overlayGradientVol,samplePos); //interpolate gradient direction and magnitude
			if (gradientSample.a > 0.01) {
				if (gradientSample.a < oprevNorm.a)
					gradientSample.rgb = oprevNorm.rgb;
				oprevNorm = gradientSample;
				gradientSample.rgb = normalize(gradientSample.rgb*2.0 - 1.0); //direction saved as 0..1, rescale to -1..1
				ocolorSample = texture(overlayVol,samplePos);
				ocolorSample.a *= gradientSample.a; //modulate by gradient
				ocolorSample.a *= overAlphaFrac;
				ocolorSample.a = sqrt(ocolorSample.a);
				float lightNormDot = dot(gradientSample.rgb, lightDirHeadOn); //with respect to viewer
				float edgeVal = pow(1.0-abs(lightNormDot),edgeExp) * pow(gradientSample.a,overShade);
				if (edgeVal >= edgeThresh)
					ocolorSample.rgb = mix(ocolorSample.rgb, vec3(0.0,0.0,0.0), pow((edgeVal-edgeThresh)/(1.0-edgeThresh),4.0));
				if ( ocolorSample.a > 0.2) {
					if (overDepth == 0) overDepth = i;
					colorSample= max(ocolorSample, colorSample);
				}

				//specular
				lightNormDot = dot(gradientSample.rgb, lightPosition); //with respect to light location
				if (lightNormDot > 0.0)
					ocolorSample.rgb +=    overLight * specular * pow(max(dot(reflect(lightPosition, gradientSample.rgb), dir), 0.0), shininess);

				//accumulate overlay color
				ocolorSample.a = 1.0-pow((1.0 - ocolorSample.a), opacityCorrection);
				overAcc= (1.0 - overAcc.a) * ocolorSample + overAcc;
				boundAcc2 += (1.0 - boundAcc2) * ocolorSample.a;
			}
		}

		colorSample.a = 1.0-pow((1.0 - colorSample.a), opacityCorrection);
		colorSample.rgb *= colorSample.a;
		//accumulate color
		colAcc= (1.0 - colAcc.a) * colorSample + colAcc;
		samplePos += deltaDir;
		lengthAcc += stepSize;
		if ( lengthAcc >= len )
			break;
	}
	colAcc.a *= backAlpha;
	//if ((colAcc.a + boundAcc) > 0.0)
	//	colAcc = mix(colAcc, vec4(0.0,0.0,0.0,1.0), edgeBoundMix * boundAcc/(colAcc.a+boundAcc) );
	if ((edgeBoundMix > 0.0) && ((colAcc.a + boundAcc) > 0.0)) {
		colAcc.rgb = mix(colAcc.rgb, vec3(0.0,0.0,0.0), (edgeBoundMix * boundAcc)/(colAcc.a+(edgeBoundMix * boundAcc)) );
		colAcc.a = max(colAcc.a, boundAcc);
	}
	if ((overAcc.a > 0.0) && (overAlpha > 1.0))  {
		colAcc.a=max(colAcc.a,overAcc.a);
		if ((overDistance > 0.0) && (overDepth > backDepthStart) && (backDepthEnd > backDepthStart)) {
			if (overDepth > backDepthEnd) overDepth = backDepthStart; // backDepthEnd
			float dx = float(overDepth-backDepthStart)/ float(backDepthEnd - backDepthStart);
			dx = pow(1.0-dx, overDistance);
			dx = pow(dx, 2.0);
			overAcc *= dx;
		}
		overAlphaFrac = overAlpha - 1.0;
		colAcc.rgb=mix(colAcc.rgb, overAcc.rgb,  overAlphaFrac);
	}
	//float contrast = 1.5;
	colAcc.rgb = (colAcc.rgb - 0.5) * contrast + 0.5;

	//if ((clearColor.r+clearColor.g+clearColor.b) > 1.5) colAcc.rgb = 1.0-colAcc.rgb;
	colAcc.rgb = mix(clearColor,colAcc.rgb,colAcc.a);
	if (len == 0.0) colAcc.rgb = clearColor;
	FragColor = colAcc;
}